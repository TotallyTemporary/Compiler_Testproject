# This is what i plan for the language to look like
# A hash symbol starts a multiline comment.

/* This begins a multiline comment

The language will have
* Only integers
* Pointers and string literals will be just integers.
* All code is inside of functions (C-like).

Details:
* no for loops, all loops will be done with while. Maybe added in a future update?
* x = 2 will not be considered a statement but a binary operation expression. It sets x value to 2 and returns 2.

program: { function_declaration } EOF
function_declaration: IDENT LPAREN IDENT* RPAREN statement

statement: block_statement | if_statement | while_statement
    | return_statement | vardecl_statement | (expr SEMI) | SEMI

block_statement: LBRACKET statement* RBRACKET
if_statement: IF expr statement
while_statement: WHILE expr statement
vardecl_statement: VAR IDENT EQUALS expr SEMI
return_statement: RETURN expr SEMI

expr: math_expr ([AND OR DOUBLE_EQUALS NOT_EQUALS EQUALS] expr)*
    | funccall_expr

math_expr: term ([PLUS | MINUS] term)*

term: factor ([MUL | DIV] factor)*

factor: ([PLUS | MINUS | MUL | AND] factor) | # despite being named MUL and AND, these are the *x and &x unary reference and dereference ops.
(LPAREN expr RPAREN) | INTEGER_LITERAL | STRING_LITERAL | INDENT

funccall_expr: INDENT LPAREN expr* RPAREN

*/

thisIsAFunction (a b) {
  return a+b;
}